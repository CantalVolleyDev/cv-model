package com.jtouzy.cv.model.tools.generate;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.stream.Collectors;

import com.google.common.collect.Lists;
import com.jtouzy.cv.model.classes.Competition;
import com.jtouzy.cv.model.classes.Season;
import com.jtouzy.cv.model.tools.back.DropboxAPI;
import com.jtouzy.cv.model.tools.back.XmlBackUtils;
import com.jtouzy.dao.DAOManager;
import com.jtouzy.dao.db.DBType;
import com.jtouzy.dao.errors.model.TableContextNotFoundException;
import com.jtouzy.dao.model.ColumnContext;
import com.jtouzy.dao.model.ModelContext;
import com.jtouzy.dao.model.TableContext;

public class DBGenerateTool {

	public static void main(String[] args)
	throws Exception {
		/*try {
			DAOManager.init("com.jtouzy.cv.model.classes");
			Connection connection = DriverManager.getConnection("jdbc:postgresql://5.135.146.110:5432/jto_cvapi_dvt", "postgres", "jtogri%010811sqladmin");
			DBUtils.createAllTables(connection, Season.class, Competition.class);
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		DAOManager.init("com.jtouzy.cv.model.classes");
		createAllTables(null);
	}
	
	public static final void createAllTables(Connection connection)
	throws TableContextNotFoundException, SQLException {
		Set<TableContext> contexts = ModelContext.getAllTableContexts();
		for (TableContext tableContext : contexts) {
			createTable(connection, tableContext.getTableClass());
		}
	}
	
	public static final void createTable(Connection connection, Class<?> clazz)
	throws TableContextNotFoundException, SQLException {
		final StringBuilder crt = new StringBuilder();
		final StringBuilder sql = new StringBuilder();
		TableContext tableContext = ModelContext.getTableContext(clazz);
		Collection<ColumnContext> fields = tableContext.getColumns();
		final Collection<ColumnContext> idFields = new ArrayList<>();
		final Collection<ColumnContext> relationFields = new ArrayList<>();
		crt.append("drop table if exists ")
		   .append(tableContext.getName())
		   .append(";").append("\n");
		sql.append("create table ")
		   .append(tableContext.getName())
		   .append(" (").append("\n");
		fields.stream().forEach(f -> {
			sql.append("\t")
			   .append(f.getName())
			   .append(" ")
			   .append(f.getType().getSqlSyntax());
			if (f.getType().isLengthSensitive()) {
				sql.append("(")
				   .append(f.getLength())
				   .append(")");
			}
			if (f.getType() == DBType.ENUM) {
				sql.append("(")
				   .append(Lists.newArrayList(f.getFieldContext().getField().getType().getEnumConstants())
						        .stream()
						        .map(ec -> {
						        	return new StringBuilder("'").append(ec.toString()).append("'");
						        })
						        .collect(Collectors.joining(",")))
				   .append(")");
			}
			if (f.isIdentifier()) {
				idFields.add(f);
				if (f.isAutoGenerated()) {
					crt.append("drop sequence if exists ")
					   .append(tableContext.getName())
					   .append("_id;").append("\n");
					crt.append("create sequence ")
					   .append(tableContext.getName())
					   .append("_id start 1;").append("\n");
					sql.append(" default nextval('")
					   .append(tableContext.getName())
					   .append("_id')");
				}
			}
			sql.append(",").append("\n");
		});
		sql.append("\t")
		   .append("primary key (")
		   .append(idFields.stream()
		                   .map(f -> f.getName())
		                   .collect(Collectors.joining(",")))
		   .append(")").append("\n");
		crt.append(sql)
		   .append(");");
		System.out.println(crt);
		
		if (connection != null) {
			Statement stmt = connection.createStatement();
			stmt.execute(crt.toString());
		}
	}
}
